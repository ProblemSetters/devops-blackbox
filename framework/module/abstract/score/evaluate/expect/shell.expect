#!/usr/bin/env bash
blackbox.framework.module.abstract.score.evaluate.expect.shell() {
  function blackbox.framework.module.abstract.score.evaluate.expect.shell.debug() {
    declare assert=$(</dev/stdin)

    blackbox.framework.trace "${FUNCNAME[0]}" "$*" <<<""

    assert=$(sed "s/\({\);/\1/g; s/\(;\)\{2\}/\1/g" <(awk 'ORS="; "' <(sed '1,2d; $d; s/[[:space:]]$//g; s/^[[:space:]]\+//g' <(eval "$(printf "function _() { %s }" "$(sed "s/\({\);/\1/g" <(awk 'ORS="; "' <(sed '/^#/d; /^$/d; s/;$//g; s/^[[:space:]]\+//g' <<<"$assert")))")"; declare -f _))))

    (
      printf "\033[0;33m@@ DEBUG:\033[0m %s\n" "$assert"
      printf "\033[0;37m--\033[0m\n"
      printf "\033[0;38m%s\033[0m\n" "$(docker exec -i -w "$BLACKBOX_USER_QUESTION_DIR" "$BLACKBOX_SPAWN" /bin/bash 2>&1 <<<"source /blackbox/blackbox &>/dev/null && ${assert}")"
      printf "\033[0;37m--\033[0m\n"
    ) | if ( tput setaf &>/dev/null ); then cat; else sed "s/\x1b\[[0-9;]*m//g"; fi

    kill $$
  }

  function blackbox.framework.module.abstract.score.evaluate.expect.shell.failure() {
    declare assert=$(</dev/stdin)

    typeset score=$1
    typeset message_true=$2
    typeset message_false=$3
    typeset message_args=("${@:4}")

    blackbox.framework.trace "${FUNCNAME[0]}" "$*" <<<"evaluate:expect"

    assert=$(awk 'BEGIN { printf "( " } { printf "%s%s", EOL, $0; EOL=" ) && ( " } END { printf " )" }' <<<"$assert")

    if ( ! (docker exec -i -w "$BLACKBOX_USER_QUESTION_DIR" "$BLACKBOX_SPAWN" /bin/bash &>/dev/null <<<"source /blackbox/blackbox &>/dev/null && ${assert}") ); then
      blackbox.framework.module.abstract.score.evaluate.assert.true "$assert" "$score" "$(printf "$message_true" "${message_args[@]:-%s}")"
    else
      blackbox.framework.module.abstract.score.evaluate.assert.false "$assert" "$score" "$(printf "$message_false" "${message_args[@]:-%s}")"
    fi
  }

  function blackbox.framework.module.abstract.score.evaluate.expect.shell.stderr() {
    declare assert=$(</dev/stdin)

    typeset score=$1
    typeset message_true=$2
    typeset message_false=$3
    typeset message_args=("${@:4}")

    blackbox.framework.trace "${FUNCNAME[0]}" "$*" <<<"evaluate:expect"

    assert=$(awk 'BEGIN { printf "( " } { printf "%s%s", EOL, $0; EOL=" ); ( " } END { printf " )" }' <<<"$assert")

    if ( grep -q . <(docker exec -i -w "$BLACKBOX_USER_QUESTION_DIR" "$BLACKBOX_SPAWN" /bin/bash 2>&1 1>/dev/null <<<"source /blackbox/blackbox &>/dev/null && ${assert}") ); then
      blackbox.framework.module.abstract.score.evaluate.assert.true "$assert" "$score" "$(printf "$message_true" "${message_args[@]:-%s}")"
    else
      blackbox.framework.module.abstract.score.evaluate.assert.false "$assert" "$score" "$(printf "$message_false" "${message_args[@]:-%s}")"
    fi
  }

  function blackbox.framework.module.abstract.score.evaluate.expect.shell.stdout() {
    declare assert=$(</dev/stdin)

    typeset score=$1
    typeset message_true=$2
    typeset message_false=$3
    typeset message_args=("${@:4}")

    blackbox.framework.trace "${FUNCNAME[0]}" "$*" <<<"evaluate:expect"

    assert=$(awk 'BEGIN { printf "( " } { printf "%s%s", EOL, $0; EOL=" ); ( " } END { printf " )" }' <<<"$assert")

    if ( grep -q . <(docker exec -i -w "$BLACKBOX_USER_QUESTION_DIR" "$BLACKBOX_SPAWN" /bin/bash 2>/dev/null <<<"source /blackbox/blackbox &>/dev/null && ${assert}") ); then
      blackbox.framework.module.abstract.score.evaluate.assert.true "$assert" "$score" "$(printf "$message_true" "${message_args[@]:-%s}")"
    else
      blackbox.framework.module.abstract.score.evaluate.assert.false "$assert" "$score" "$(printf "$message_false" "${message_args[@]:-%s}")"
    fi
  }

  function blackbox.framework.module.abstract.score.evaluate.expect.shell.success() {
    declare assert=$(</dev/stdin)

    typeset score=$1
    typeset message_true=$2
    typeset message_false=$3
    typeset message_args=("${@:4}")

    blackbox.framework.trace "${FUNCNAME[0]}" "$*" <<<"evaluate:expect"

    assert=$(awk 'BEGIN { printf "( " } { printf "%s%s", EOL, $0; EOL=" ) && ( " } END { printf " )" }' <<<"$assert")

    if ( docker exec -i -w "$BLACKBOX_USER_QUESTION_DIR" "$BLACKBOX_SPAWN" /bin/bash &>/dev/null <<<"source /blackbox/blackbox &>/dev/null && ${assert}"); then
      blackbox.framework.module.abstract.score.evaluate.assert.true "$assert" "$score" "$(printf "$message_true" "${message_args[@]:-%s}")"
    else
      blackbox.framework.module.abstract.score.evaluate.assert.false "$assert" "$score" "$(printf "$message_false" "${message_args[@]:-%s}")"
    fi
  }
}
