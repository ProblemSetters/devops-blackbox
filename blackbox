#!/usr/bin/env bash

blackbox() {
  export BLACKBOX_VERSION=master

  export BLACKBOX_HOST=${BLACKBOX_HOST:-localhost}
  export BLACKBOX_HOST_USER=${BLACKBOX_HOST_USER:-1000:1000}
  export BLACKBOX_HOST_USERNAME=${BLACKBOX_HOST_USERNAME:-ubuntu}
  export BLACKBOX_SPAWN=${BLACKBOX_SPAWN:-$(cat /proc/sys/kernel/random/uuid 2>/dev/null || head /dev/urandom | tr -cd "[:alnum:]" | head -c 36)}

  export BLACKBOX_FLAG__DEBUG_MODE=${BLACKBOX_FLAG__DEBUG_MODE:-no}
  export BLACKBOX_FLAG__INVENTORY_CACHE_TTL=${BLACKBOX_INVENTORY_CACHE_TTL:-60}
  export BLACKBOX_FLAG__STEP_BUILD=${BLACKBOX_FLAG__STEP_BUILD:-yes}
  export BLACKBOX_FLAG__STEP_CONFIGURE=${BLACKBOX_FLAG__STEP_CONFIGURE:-yes}
  export BLACKBOX_FLAG__STEP_EVALUATE=${BLACKBOX_FLAG__STEP_EVALUATE:-yes}
  export BLACKBOX_FLAG__STEP_PROVISION=${BLACKBOX_FLAG__STEP_PROVISION:-yes}

  export BLACKBOX_HOST_WITH_OPTS=$(declare -f BLACKBOX_HOST_WITH_OPTS | sed '1,2d; $d; s/^[[:space:]]\+}/;&/' | awk '{ printf "%s%s", EOL, $0; EOL=" "}' | sed 's/[[:space:]];/; /' | tr -s '[:space:]')
  export BLACKBOX_SPAWN_WITH_OPTS=$(declare -f BLACKBOX_SPAWN_WITH_OPTS | sed '1,2d; $d; s/^[[:space:]]\+}/;&/' | awk '{ printf "%s%s", EOL, $0; EOL=" "}' | sed 's/[[:space:]];/; /' | tr -s '[:space:]')

  export BLACKBOX_MODULE_NAME=$1
  export BLACKBOX_MODULE_ACTION_NAME=$2
  export BLACKBOX_MODULE_ACTION_ARGC=$((${#@} - 2))
  export BLACKBOX_MODULE_ACTION_ARGV=${*:3}

  blackbox.exception() {
    function blackbox.exception.raise() {
      typeset message=$1
      typeset -a args=("${@:2}")

      printf "[ERROR]: %s.\n" "$(printf "$message" "${args[@]}")" >&2 && {
        kill $$
      }
    }
  }; blackbox.exception

  blackbox.flag() {
    function blackbox.flag.enabled() {
      typeset name=$1

      local real_value=$(eval echo "$(printf "\$BLACKBOX_FLAG__%s" "$name")")

      if [ -z "$real_value" ]; then
        blackbox.exception.raise 'flag "%s" not found' "$name"
      fi

      [[ "$real_value" != "no" ]]
    }

    function blackbox.flag.is() {
      typeset name=$1
      typeset expected_value=$2

      local real_value=$(eval echo "$(printf "\$BLACKBOX_FLAG__%s" "$name")")

      if [ -z "$real_value" ]; then
        blackbox.exception.raise 'flag "%s" not found' "$name"
      fi

      [[ "$real_value" == "$expected_value" ]]
    }
  }; blackbox.flag

  blackbox.inventory() {
    function blackbox.inventory.provision() {
      typeset inventory_name=$1
      typeset -a inventory_args=("${@:2}")

      source <(blackbox.transport.fetch "inventory/${inventory_name}.inventory") "$inventory_name" "${inventory_args[@]}"
    }
  }; blackbox.inventory

  blackbox.module() {
    function blackbox.module.load() {
      typeset module_name=$1
      typeset -a module_args=("${@:2}")

      source <(blackbox.transport.fetch "module/${module_name}") "${module_args[@]}"
    }

    function blackbox.module.override() {
      typeset override_to=$1
      typeset override_from=$2

      local override_from_definition="(){ return; }"

      if [ -n "$override_from" ]; then
        override_from_definition="$(declare -f "$override_from")"
      fi

      eval "$(printf "function %s %s" "$override_to" "${override_from_definition#*"()"}")"
    }
  }; blackbox.module

  blackbox.transport() {
    function blackbox.transport.fetch() {
      typeset resource_uri=$1

      cat "/blackbox/${resource_uri}" 2>/dev/null || {
        wget -qO- "https://raw.githubusercontent.com/ProblemSetters/devops-blackbox/${BLACKBOX_VERSION}/${resource_uri}" || {
          blackbox.exception.raise 'resource "%s" not found' "$resource_uri"
        }
      }
    }
  }; blackbox.transport

  blackbox.__init() {
    typeset module_name=$1
    typeset -a module_args=("${@:2}")

    if [ -z "$module_name" ]; then
      return
    fi

    if ( blackbox.flag.enabled DEBUG_MODE ); then
      printf "\n"
      printf "\033[0;37m%s\033[0m\n" "$(printenv | sort)"
    else
      printf "%s\n" "$(printenv | sort)"
    fi

    blackbox.module.load "${module_name}.module" "${module_args[@]}"
  } && blackbox.__init "$@"
}; blackbox "$@"
