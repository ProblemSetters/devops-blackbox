#!/usr/bin/env bash
blackbox() {
  export BLACKBOX_DIR=/blackbox

  export BLACKBOX_SPAWN=$(awk -v master="$(</proc/sys/kernel/random/uuid)" -v user="$BLACKBOX_SPAWN" 'END { print ($0 == "init") ? master : user }' <(ps -p 1 -o comm=))

  export BLACKBOX_USER=$(awk -v master="1000:1000" -v user="$BLACKBOX_USER" 'END { print ($0 == "init") ? master : user }' <(ps -p 1 -o comm=))
  export BLACKBOX_USER_NAME=$(awk -v master="ubuntu" -v user="$BLACKBOX_USER_NAME" 'END { print ($0 == "init") ? master : user }' <(ps -p 1 -o comm=))
  export BLACKBOX_USER_HOME=$(awk -v master="/home/${BLACKBOX_USER_NAME}" -v user="$BLACKBOX_USER_HOME" 'END { print ($0 == "init") ? master : user }' <(ps -p 1 -o comm=))
  export BLACKBOX_USER_QUESTION_DIR=$(awk -v master="${BLACKBOX_USER_HOME}/${3}" -v user="$BLACKBOX_USER_QUESTION_DIR" 'END { print ($0 == "init") ? master : user }' <(ps -p 1 -o comm=))
  export BLACKBOX_VERSION=$(awk -v master="master" -v user="$BLACKBOX_VERSION" 'END { print ($0 == "init") ? master : user }' <(ps -p 1 -o comm=))

  export BLACKBOX_FLAG__STEP_PROVISION=$(awk -v master="yes" -v user="$BLACKBOX_FLAG__STEP_PROVISION" 'END { print ($0 == "init") ? master : user }' <(ps -p 1 -o comm=))
  export BLACKBOX_FLAG__STEP_BUILD=$(awk -v master="yes" -v user="$BLACKBOX_FLAG__STEP_BUILD" 'END { print ($0 == "init") ? master : user }' <(ps -p 1 -o comm=))
  export BLACKBOX_FLAG__STEP_EVALUATE=$(awk -v master="yes" -v user="$BLACKBOX_FLAG__STEP_EVALUATE" 'END { print ($0 == "init") ? master : user }' <(ps -p 1 -o comm=))

  export BLACKBOX_PROVISION_WITH_OPTS=$(sed "s/[[:space:]];\([[:space:]]}\)/;\1/" <(awk '{ printf "%s%s", EOL, $0; EOL=" "}' <(sed '1,2d; $d; s/^[[:space:]]\+//g; s/^}/; &/g' <(declare -f BLACKBOX_PROVISION_WITH_OPTS))))
  export BLACKBOX_BUILD_WITH_OPTS=$(sed "s/[[:space:]];\([[:space:]]}\)/;\1/" <(awk '{ printf "%s%s", EOL, $0; EOL=" "}' <(sed '1,2d; $d; s/^[[:space:]]\+//g; s/^}/; &/g' <(declare -f BLACKBOX_BUILD_WITH_OPTS))))

  typeset -gx BLACKBOX_SCENARIO_PATH=$(realpath "$0")
  typeset -gx BLACKBOX_MODULE_NAME=$1
  typeset -gx BLACKBOX_MODULE_ACTION_NAME=$2
  typeset -gx BLACKBOX_QUESTION_ID=$3

  blackbox.framework() {
    function blackbox.framework.import() {
      typeset namespace=$1
      typeset -a args=("${@:2}")

      local destination_namespace_name=${namespace%:*}
      local destination_namespace_extension=$(sed -n "s/.*://p" <<<"$namespace")

      if [ -z "$destination_namespace_extension" ]; then
        destination_namespace_extension=$(rev <(cut -d "." -f 2 <(rev <<<"$namespace")))
      fi

      local destination_definition=$(declare -f "$destination_namespace_name")

      if [ -n "$destination_definition" ]; then
        return
      fi

      local destination_definition_path=$(printf "%s/%s.%s" "$BLACKBOX_DIR" "$(sed "s/\./\//g" <(cut -d "." -f 2- <<<"$destination_namespace_name"))" "$destination_namespace_extension")

      if [ ! -e "$destination_definition_path" ]; then
        if ( ! declare -f blackbox.framework.exception.raise &>/dev/null ); then
          printf "error: *** definition '%s' does not exists\n" "$destination_definition_path"

          kill $$
        fi

        blackbox.framework.exception.raise "definition '%s' does not exists" "$destination_definition_path"
      fi

      destination_definition=$(source "$destination_definition_path" && declare -f "$destination_namespace_name")

      local destination_definition_source_placeholder=$(sed -n '/^[[:space:]]*:[[:space:]]<<<[[:space:]]blackbox\.[[:lower:][:digit:].:]\+;\{0,1\}$/p' <<<"$destination_definition")

      if [ -z "$destination_definition_source_placeholder" ]; then
        source "$(printf "%s/%s.%s" "$BLACKBOX_DIR" "$(sed "s/\./\//g" <(cut -d "." -f 2- <<<"$destination_namespace_name"))" "$destination_namespace_extension")" && {
          eval "$destination_namespace_name" "${args[@]}"
        }

        return
      fi

      local source_namespace=$(sed -n 's/^[[:space:]]*:[[:space:]]<<<[[:space:]]\(blackbox\.[[:lower:][:digit:].:]\+\);\{0,1\}$/\1/p' <<<"$destination_definition")
      local source_namespace_name=${source_namespace%:*}
      local source_namespace_extension=$(sed -n "s/.*://p" <<<"$source_namespace")

      if [ -z "$source_namespace_extension" ]; then
        source_namespace_extension=$(rev <(cut -d "." -f 2 <(rev <<<"$source_namespace")))
      fi

      local source_definition_path=$(printf "%s/%s.%s" "$BLACKBOX_DIR" "$(sed "s/\./\//g" <(cut -d "." -f 2- <<<"$source_namespace_name"))" "$source_namespace_extension")

      if [ ! -e "$source_definition_path" ]; then
        if ( ! declare -f blackbox.framework.exception.raise &>/dev/null ); then
          printf "error: *** definition '%s' does not exists\n" "$source_definition_path"

          kill $$
        fi

        blackbox.framework.exception.raise "definition '%s' does not exists" "$source_definition_path"
      fi

      source_definition=$(source "$source_definition_path" && declare -f "$source_namespace_name")

      local source_definition_destination_placeholder=$(sed -n "/[[:space:]]*:[[:space:]]<<<[[:space:]]blackbox\.[[:lower:][:digit:].*:]\+;\{0,1\}/p" <<<"$source_definition")
      local source_definition_destination_namespace=$(sed -n "s/[[:space:]]*:[[:space:]]<<<[[:space:]]\(blackbox\.[[:lower:][:digit:].*:]\+\);\{0,1\}/\1/p" <<<"$source_definition_destination_placeholder")

      if ( ! grep -q "$(printf '^%s$' "$source_definition_destination_namespace")" <<<"$destination_namespace_name" ); then
        if ( ! declare -f blackbox.framework.exception.raise &>/dev/null ); then
          printf "error: *** definition '%s' cannot be extended with '%s'\n" "$destination_namespace_name" "$source_definition_destination_namespace"

          kill $$
        fi

        blackbox.framework.exception.raise "definition '%s' cannot be extended with '%s'" "$destination_namespace_name" "$source_definition_destination_namespace"
      fi

      source_definition=$(sed '1,2d; $d' <<<"$source_definition")
      destination_definition=$(sed "$(printf '1,2d; $d; /%s/d' "$destination_definition_source_placeholder")" <<<"$destination_definition")
      eval "$(printf '%s() {\n%s\n}; %s' "$destination_namespace_name" "${source_definition/${source_definition_destination_placeholder}/${destination_definition}}" "$destination_namespace_name")" "${args[@]}"
    }
  }; blackbox.framework

  blackbox.framework.import "blackbox.framework.exception:framework"
  blackbox.framework.import "blackbox.framework.flag:framework"
  blackbox.framework.import "blackbox.framework.inventory:framework"
  blackbox.framework.import "blackbox.framework.module:framework"

  function blackbox.__init() {
    typeset module_name=$1
    typeset -a module_args=("${@:2}")

    if [ ! -e "$BLACKBOX_DIR" ]; then
      wget -S -O /tmp/blackbox "https://github.com/ProblemSetters/devops-blackbox/archive/${BLACKBOX_VERSION}.zip" && {
        unzip /tmp/blackbox -d /tmp && {
          mv "/tmp/devops-blackbox-${BLACKBOX_VERSION}" "$BLACKBOX_DIR"
          rm -rf /tmp/*blackbox*
        }
      } || blackbox.framework.exception.raise "blackbox '%s' is not available" "$BLACKBOX_VERSION"
    fi

    blackbox.framework.inventory.install.directory "$BLACKBOX_USER_QUESTION_DIR" && {
      pushd "$BLACKBOX_USER_QUESTION_DIR" && {
        blackbox.framework.module.load "$module_name" "${module_args[@]}"
      }
    }
  } && blackbox.__init "$@"
}; blackbox "$@"
