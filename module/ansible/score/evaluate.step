#!/usr/bin/env bash

blackbox.module.ansible.score.evaluate() {
  export BLACKBOX_SCORE_EVALUATE_SCENARIO=$0
  export BLACKBOX_SCORE_EVALUATE_CACHE="/tmp/evaluate.cache-${RANDOM}"

  blackbox.module.ansible.score.evaluate.assert() {
    function blackbox.module.ansible.score.evaluate.assert.true() {
        typeset assert_source=$1
        typeset assert=$2
        typeset assert_score=$3
        typeset assert_message=$4

        assert_score=$(blackbox.module.ansible.score.evaluate.score.calculate "$assert_score")

        local assert_linear=$(echo "$assert" | awk '{ printf "%s%s", EOL, $0; EOL="; " }')

        if ( blackbox.flag.enabled DEBUG_MODE ); then
          printf "\033[0;37m%s < %s\033[0m\n" "$assert_source" "$assert_linear"
          printf "\033[0;32m[SUCCESS]\033[0m %s\n" "${assert_message:-$assert_linear}"
        else
          printf "[SUCCESS] %s\n" "${assert_message:-$assert_linear}"
        fi

        printf "Partial Credit: %s\n" "$assert_score"
        printf "\n"

        true
    }

    function blackbox.module.ansible.score.evaluate.assert.false() {
      typeset assert_source=$1
      typeset assert=$2
      typeset assert_score=$3
      typeset assert_message=$4

      assert_score=$(blackbox.module.ansible.score.evaluate.score.calculate "$assert_score")

      local assert_linear=$(echo "$assert" | awk '{ printf "%s%s", EOL, $0; EOL="; " }')

      if ( blackbox.flag.enabled DEBUG_MODE ); then
        printf "\033[0;37m%s < %s\033[0m\n" "$assert_source" "$assert_linear"
        printf "\033[0;31m[FAIL]\033[0m %s\n" "${assert_message:-$assert_linear}"
      else
        printf "[FAIL] %s\n" "${assert_message:-$assert_linear}"
      fi

      printf "Partial Credit: 0\n"
      printf "\n"

      false
    }
  }; blackbox.module.ansible.score.evaluate.assert

  blackbox.module.ansible.score.evaluate.expect() {
    blackbox.module.ansible.score.evaluate.expect.debug() {
      function blackbox.module.ansible.score.evaluate.expect.debug.shell() {
        declare assert="$(</dev/stdin)"

        local assert_linear=$(echo "$assert" | awk '{ printf "%s%s", EOL, $0; EOL="; " }')

        printf "\033[0;37m%s < %s\033[0m\n" "${FUNCNAME[0]}" "$assert_linear"
        printf "\033[0;33m[DEBUG]\033[0m\n"
        printf "%s\n" "$(echo "$assert" | docker exec -i -w "/home/${BLACKBOX_HOST_USERNAME}" "$BLACKBOX_SPAWN" "$BASH" 2>&1)"
        printf "\n"
      }
    }; blackbox.module.ansible.score.evaluate.expect.debug

    blackbox.module.ansible.score.evaluate.expect.docker() {
      function blackbox.module.ansible.score.evaluate.expect.docker.container() {
        declare assert="docker ps -aq -f "name=$(</dev/stdin)""

        typeset assert_score=$1
        typeset assert_message_true=$2
        typeset assert_message_false=$3

        if [ -n "$(echo "$assert" | docker exec -i "$BLACKBOX_SPAWN" "$BASH" 2>/dev/null )" ]; then
          blackbox.module.ansible.score.evaluate.assert.true "${FUNCNAME[0]}" "$assert" "$assert_score" "$assert_message_true"
        else
          blackbox.module.ansible.score.evaluate.assert.false "${FUNCNAME[0]}" "$assert" "$assert_score" "$assert_message_false"
        fi
      }
    }; blackbox.module.ansible.score.evaluate.expect.docker

    blackbox.module.ansible.score.evaluate.expect.file() {
      function blackbox.module.ansible.score.evaluate.expect.file.exists() {
        declare assert=$(</dev/stdin)

        typeset assert_score=$1
        typeset assert_message_true=$2
        typeset assert_message_false=$3

        if ( docker exec -i -w "/home/${BLACKBOX_HOST_USERNAME}" "$BLACKBOX_SPAWN" "$BASH" -c "test -e $assert" >/dev/null 2>&1 ); then
          blackbox.module.ansible.score.evaluate.assert.true "${FUNCNAME[0]}" "$assert" "$assert_score" "$assert_message_true"
        else
          blackbox.module.ansible.score.evaluate.assert.false "${FUNCNAME[0]}" "$assert" "$assert_score" "$assert_message_false"
        fi
      }
    }; blackbox.module.ansible.score.evaluate.expect.file

    blackbox.module.ansible.score.evaluate.expect.shell() {
      function blackbox.module.ansible.score.evaluate.expect.shell.success() {
        declare assert=$(</dev/stdin)

        typeset assert_score=$1
        typeset assert_message_true=$2
        typeset assert_message_false=$3

        if ( echo "$assert" | docker exec -i -w "/home/${BLACKBOX_HOST_USERNAME}" "$BLACKBOX_SPAWN" "$BASH" >/dev/null 2>&1 ); then
          blackbox.module.ansible.score.evaluate.assert.true "${FUNCNAME[0]}" "$assert" "$assert_score" "$assert_message_true"
        else
          blackbox.module.ansible.score.evaluate.assert.false "${FUNCNAME[0]}" "$assert" "$assert_score" "$assert_message_false"
        fi
      }
    }; blackbox.module.ansible.score.evaluate.expect.shell
  }; blackbox.module.ansible.score.evaluate.expect

  blackbox.module.ansible.score.evaluate.score() {
    function blackbox.module.ansible.score.evaluate.score.calculate() {
      typeset assert_score=$1

      if [[ ! "$assert_score" =~ ^[0-9]+([.][0-9]+)?$  ]]; then
        if [[ "$assert_score" == "-" ]]; then
          assert_score=0
        else
          local expect_total=$(awk "/^cat <<ASSERT/ { asserts++ } END { print asserts }" "$BLACKBOX_SCORE_EVALUATE_SCENARIO")

          assert_score=$(awk -v expect_total="$expect_total" '{ current_score += $1 } END { expect_current=NR; print int((100 - current_score) / (expect_total - expect_current) + 0.5) }' "$BLACKBOX_SCORE_EVALUATE_CACHE")
        fi
      fi

      echo $assert_score | tee -a "$BLACKBOX_SCORE_EVALUATE_CACHE"
    }
  }; blackbox.module.ansible.score.evaluate.score

  blackbox.module.ansible.score.evaluate.__init() {
    if ( blackbox.flag.enabled DEBUG_MODE ); then
      printf "\n"
      printf "\033[0;37m%s\033[0m\n" "${FUNCNAME[0]}"
      printf "\033[0;34m[EVALUATE]\033[0m\n"
    else
      printf "\n"
      printf "[EVALUATE]\n"
    fi

    : >"$BLACKBOX_SCORE_EVALUATE_CACHE"
  } && blackbox.module.ansible.score.evaluate.__init
}; blackbox.module.ansible.score.evaluate "$@"
