#!/usr/bin/env bash
blackbox.module.docker.score.evaluate() {
  export BLACKBOX_SCORE_EVALUATE_CACHE="/tmp/evaluate.cache-${RANDOM}"

  blackbox.module.docker.score.evaluate.assert() {
    function blackbox.module.docker.score.evaluate.assert.true() {
      typeset source=$1
      typeset assert=$2
      typeset score=$3
      typeset message=$4

      blackbox.trace.entrypoint assert "$source" "$assert"

      local score=$(blackbox.module.docker.score.evaluate.score.calculate "$score")
      local message=$(printf "$message" "$assert")

      if ( blackbox.flag.enabled DEBUG_MODE ); then
        printf "\n"
        printf "\033[0;32m.: SUCCESS:\033[0m %s\n" "$message"
        printf "\033[0;37m%s\033[0m\n" --
        printf "Partial Credit: %s\n" "$score"
        printf "\033[0;37m%s\033[0m\n" --
      else
        printf "\n"
        printf ".: SUCCESS: %s\n" "$message"
        printf "%s\n" --
        printf "Partial Credit: %s\n" "$score"
        printf "%s\n" --
      fi

      true
    }

    function blackbox.module.docker.score.evaluate.assert.false() {
      typeset source=$1
      typeset assert=$2
      typeset score=$3
      typeset message=$4

      blackbox.trace.entrypoint assert "$source" "$assert"

      local score=$(blackbox.module.docker.score.evaluate.score.calculate "$score" >/dev/null; echo 0)
      local message=$(printf "$message" "$assert")

      if ( blackbox.flag.enabled DEBUG_MODE ); then
        printf "\n"
        printf "\033[0;31m.: FAIL:\033[0m %s\n" "$message"
        printf "\033[0;37m%s\033[0m\n" --
        printf "Partial Credit: %s\n" "$score"
        printf "\033[0;37m%s\033[0m\n" --
      else
        printf "\n"
        printf ".: FAIL: %s\n" "$message"
        printf "%s\n" --
        printf "Partial Credit: %s\n" "$score"
        printf "%s\n" --
      fi

      false
    }
  }; blackbox.module.docker.score.evaluate.assert

  blackbox.module.docker.score.evaluate.expect() {
    blackbox.module.docker.score.evaluate.expect.artifact() {
      function blackbox.module.docker.score.evaluate.expect.artifact.collection() {
        declare assert=$(</dev/stdin)

        readarray -t collection<<<"${assert[*]}"

        blackbox.trace.entrypoint evaluate.step "${FUNCNAME[0]}" "$(echo "$assert" | awk '{ printf "%s%s", EOL, $0; EOL="; " }')"

        for artifact in "${collection[@]}"; do
          if ( blackbox.flag.enabled DEBUG_MODE ); then
            printf "\n"
            printf "\033[0;35m.: ARTIFACT:\033[0m %s\n" "$artifact"
            printf "\033[0;37m%s\033[0m\n" --
            printf "\033[0;38m%s\033[0m\n" "$(echo "source /dev/blackbox >/dev/null; ${artifact} 2>&1" | docker exec -i -w "${BLACKBOX_USER_QUESTION_DIRECTORY}" "$BLACKBOX_SPAWN" "$BASH" 2>&1)"
            printf "\033[0;37m%s\033[0m\n" --
          else
            printf "\n"
            printf ".: ARTIFACT: %s\n" "$artifact"
            printf "%s\n" --
            printf "%s\n" "$(echo "source /dev/blackbox >/dev/null; ${artifact} 2>&1" | docker exec -i -w "${BLACKBOX_USER_QUESTION_DIRECTORY}" "$BLACKBOX_SPAWN" "$BASH" 2>&1)"
            printf "%s\n" --
          fi
        done
      }
    }; blackbox.module.docker.score.evaluate.expect.artifact

    blackbox.module.docker.score.evaluate.expect.file() {
      function blackbox.module.docker.score.evaluate.expect.file.exists() {
        declare assert=$(</dev/stdin)

        typeset score=$1
        typeset message_true=$2
        typeset message_false=$3
        typeset message_args=("${@:4}")

        if ( echo "source /dev/blackbox >/dev/null; test -f \"${assert}\"" | docker exec -i -w "${BLACKBOX_USER_QUESTION_DIRECTORY}" "$BLACKBOX_SPAWN" "$BASH" ); then
          blackbox.module.docker.score.evaluate.assert.true "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_true" "${message_args[@]:-%s}")"
        else
          blackbox.module.docker.score.evaluate.assert.false "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_false" "${message_args[@]:-%s}")"
        fi
      }
    }; blackbox.module.docker.score.evaluate.expect.file

    blackbox.module.docker.score.evaluate.expect.shell() {
      function blackbox.module.docker.score.evaluate.expect.shell.debug() {
        declare assert=$(</dev/stdin)

        local assert=$(eval "assert() { $(echo "$assert" | sed '/^#/d' | awk 'ORS="; "') }" && declare -f assert | sed '1,2d; $d; s/^[[:space:]]\+//g;' | awk '{ printf "%s%s", EOL, $0; EOL=" " }')

        blackbox.trace.entrypoint evaluate.step "${FUNCNAME[0]}" "$assert"

        if ( blackbox.flag.enabled DEBUG_MODE ); then
          printf "\n"
          printf "\033[0;33m.: DEBUG:\033[0m %s\n" "$assert"
          printf "\033[0;37m%s\033[0m\n" --
          printf "\033[0;38m%s\033[0m\n" "$(echo "source /dev/blackbox >/dev/null; ${assert}" | docker exec -i -w "${BLACKBOX_USER_QUESTION_DIRECTORY}" "$BLACKBOX_SPAWN" "$BASH" 2>&1)"
          printf "\033[0;37m%s\033[0m\n" --
        else
          printf "\n"
          printf ".: DEBUG: %s\n" "$assert"
          printf "%s\n" --
          printf "%s\n" "$(echo "source /dev/blackbox >/dev/null; ${assert}" | docker exec -i -w "${BLACKBOX_USER_QUESTION_DIRECTORY}" "$BLACKBOX_SPAWN" "$BASH" 2>&1)"
          printf "%s\n" --
        fi
      }

      function blackbox.module.docker.score.evaluate.expect.shell.failure() {
        declare assert=$(</dev/stdin)

        typeset score=$1
        typeset message_true=$2
        typeset message_false=$3
        typeset message_args=("${@:4}")

        assert=$(echo "$assert" | awk 'BEGIN { printf "(" } { printf "%s%s", EOL, $0; EOL=") && (" } END { printf ")" }')

        if ( ! (echo "source /dev/blackbox >/dev/null; ${assert}" | docker exec -i -w "/home/${BLACKBOX_USER_NAME}" "$BLACKBOX_SPAWN" "$BASH" >/dev/null 2>&1) ); then
          blackbox.module.docker.score.evaluate.assert.true "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_true" "${message_args[@]:-%s}")"
        else
          blackbox.module.docker.score.evaluate.assert.false "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_false" "${message_args[@]:-%s}")"
        fi
      }

      function blackbox.module.docker.score.evaluate.expect.shell.stderr() {
        declare assert=$(</dev/stdin)

        typeset score=$1
        typeset message_true=$2
        typeset message_false=$3
        typeset message_args=("${@:4}")

        assert=$(echo "$assert" | awk 'BEGIN { printf "(" } { printf "%s%s", EOL, $0; EOL="); (" } END { printf ")" }')

        if ( echo "source /dev/blackbox >/dev/null; ${assert}" | docker exec -i -w "${BLACKBOX_USER_QUESTION_DIRECTORY}" "$BLACKBOX_SPAWN" "$BASH" 2>&1 >/dev/null | grep -q . ); then
          blackbox.module.docker.score.evaluate.assert.true "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_true" "${message_args[@]:-%s}")"
        else
          blackbox.module.docker.score.evaluate.assert.false "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_false" "${message_args[@]:-%s}")"
        fi
      }

      function blackbox.module.docker.score.evaluate.expect.shell.stdout() {
        declare assert=$(</dev/stdin)

        typeset score=$1
        typeset message_true=$2
        typeset message_false=$3
        typeset message_args=("${@:4}")

        assert=$(echo "$assert" | awk 'BEGIN { printf "(" } { printf "%s%s", EOL, $0; EOL="); (" } END { printf ")" }')

        if ( echo "source /dev/blackbox >/dev/null; ${assert}" | docker exec -i -w "${BLACKBOX_USER_QUESTION_DIRECTORY}" "$BLACKBOX_SPAWN" "$BASH" 2>/dev/null | grep -q . ); then
          blackbox.module.docker.score.evaluate.assert.true "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_true" "${message_args[@]:-%s}")"
        else
          blackbox.module.docker.score.evaluate.assert.false "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_false" "${message_args[@]:-%s}")"
        fi
      }

      function blackbox.module.docker.score.evaluate.expect.shell.success() {
        declare assert=$(</dev/stdin)

        typeset score=$1
        typeset message_true=$2
        typeset message_false=$3
        typeset message_args=("${@:4}")

        assert=$(echo "$assert" | awk 'BEGIN { printf "(" } { printf "%s%s", EOL, $0; EOL=") && (" } END { printf ")" }')

        if ( echo "source /dev/blackbox >/dev/null; ${assert}" | docker exec -i -w "${BLACKBOX_USER_QUESTION_DIRECTORY}" "$BLACKBOX_SPAWN" "$BASH" >/dev/null 2>&1 ); then
          blackbox.module.docker.score.evaluate.assert.true "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_true" "${message_args[@]:-%s}")"
        else
          blackbox.module.docker.score.evaluate.assert.false "${FUNCNAME[0]}" "$assert" "$score" "$(printf "$message_false" "${message_args[@]:-%s}")"
        fi
      }
    }; blackbox.module.docker.score.evaluate.expect.shell
  }; blackbox.module.docker.score.evaluate.expect

  blackbox.module.docker.score.evaluate.score() {
    function blackbox.module.docker.score.evaluate.score.calculate() {
      typeset assert_score=$1

      if [[ ! "$assert_score" =~ ^[0-9]+([.][0-9]+)?$  ]]; then
        if [[ "$assert_score" == "-" ]]; then
          assert_score=0
        else
          local expect_total=$(sed "/^\. \/dev\/blackbox docker score \"${BLACKBOX_QUESTION_ID}\"\$/,/^exit 0\$/!d;//d" "$BLACKBOX_SCENARIO_PATH" | awk "/^cat <<ASSERT/ { asserts_count++ } END { print asserts_count }")

          assert_score=$(awk -v expect_total="$expect_total" '{ current_score += $1 } END { expect_current=NR; print int((100 - current_score) / (expect_total - expect_current) + 0.5) }' "$BLACKBOX_SCORE_EVALUATE_CACHE")
        fi
      fi

      echo "$assert_score" | tee -a "$BLACKBOX_SCORE_EVALUATE_CACHE"
    }
  }; blackbox.module.docker.score.evaluate.score

  blackbox.module.docker.score.evaluate.__init() {
    blackbox.trace.entrypoint evaluate.step "${FUNCNAME[0]}" "$*" "$(printf "BLACKBOX_FLAG__STEP_EVALUATE=%s" "$BLACKBOX_FLAG__STEP_EVALUATE")"

    if ( ! blackbox.flag.enabled STEP_EVALUATE ); then
      printf "\n"
      printf "skip: BLACKBOX_FLAG__STEP_EVALUATE=no\n"

      return
    fi

    blackbox.inventory.install.file "$BLACKBOX_SCORE_EVALUATE_CACHE" </dev/null
  } && blackbox.module.docker.score.evaluate.__init "$@"
}; blackbox.module.docker.score.evaluate "$@"
